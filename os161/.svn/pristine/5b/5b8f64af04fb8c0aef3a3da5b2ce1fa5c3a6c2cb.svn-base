/*
 * catsem.c
 *
 * 30-1-2003 : GWA : Stub functions created for CS161 Asst1.
 *
 * NB: Please use SEMAPHORES to solve the cat syncronization problem in 
 * this file.
 */


/*
 * 
 * Includes
 *
 */

#include <types.h>
#include <lib.h>
#include <test.h>
#include <thread.h>
#include <synch.h>

/*
 * 
 * Constants
 *
 */

/*
 * Number of food bowls.
 */

#define NFOODBOWLS 2

/*
 * Number of cats.
 */

#define NCATS 6

/*
 * Number of mice.
 */

#define NMICE 2

/*
 * 
 * Global variables
 *
 */

/*
 * Number of cats eating.
 */

int catsCount = 0;

/*
 * Number of mice eating.
 */

int miceCount = 0;

/*
 * Availability of dish 1.
 */

int dish1Avail = 1;

/*
 * Availability of dish 2.
 */

int dish2Avail = 1;

/*
 * Exclusive cat or mice.
 */

struct semaphore *cats_or_mice; 

/*
 * Mutex for the dishes.
 */

struct semaphore *mutex; 

/*
 * 
 * Function Definitions
 * 
 */

/* who should be "cat" or "mouse" */
static void
sem_eat(const char *who, int num, int bowl, int iteration)
{
        kprintf("%s: %d starts eating: bowl %d, iteration %d\n", who, num, 
                bowl, iteration);
        clocksleep(1);
        kprintf("%s: %d ends eating: bowl %d, iteration %d\n", who, num, 
                bowl, iteration);
}

/*
 * catsem()
 *
 * Arguments:
 *      void * unusedpointer: currently unused.
 *      unsigned long catnumber: holds the cat identifier from 0 to NCATS - 1.
 *
 * Returns:
 *      nothing.
 *
 * Notes:
 *      Write and comment this function using semaphores.
 *
 */

static
void
catsem(void * unusedpointer, 
       unsigned long catnumber)
{

        /*
         * Avoid unused variable warnings.
         */

        (void) unusedpointer;
        (void) catnumber;
	
	int iteration = 0;
	int bowl;

	// each cat has to eat four times
	while (iteration < 4) {

		P(mutex);
		// check if bowls are available
		if(!dish1Avail && !dish2Avail){
			V(mutex);
			continue;
		}
		
		// cats can start coming in when no mouse is eating
		if (miceCount > 0) {
			V(mutex);
			continue;
		}

		// increase the number of cats
		catsCount++;
		if(catsCount == 1)
			P(cats_or_mice);

		// eat either dish1 or dish2
		if (dish1Avail) {

			bowl = 1;
			dish1Avail = 0;
		}		
		else if (dish2Avail) {

			bowl = 2;
			dish2Avail = 0;
		}
		V(mutex);
			
		//start printing eating messages
		sem_eat("cat", catnumber, bowl, iteration);
		iteration++;

		// end a round of eating
		P(mutex);
		// decrease the number of cats
		catsCount--;
		if (catsCount == 0)
			V(cats_or_mice);

		//free bowls
		if (bowl == 1) {

			dish1Avail = 1;
		}
		else if (bowl == 2) {

			dish2Avail = 1;
		}
		V(mutex);	
	}		
		

}
        

/*
 * mousesem()
 *
 * Arguments:
 *      void * unusedpointer: currently unused.
 *      unsigned long mousenumber: holds the mouse identifier from 0 to 
 *              NMICE - 1.
 *
 * Returns:
 *      nothing.
 *
 * Notes:
 *      Write and comment this function using semaphores.
 *
 */

static
void
mousesem(void * unusedpointer, 
         unsigned long mousenumber)
{


        /*
         * Avoid unused variable warnings.
         */

        (void) unusedpointer;
        (void) mousenumber;
	
	int iteration = 0;
	int bowl;

	// each mouse has to eat four times
	while (iteration < 4) {

		P(mutex);
		// check if bowls are available
		if(!dish1Avail && !dish2Avail){
			V(mutex);
			continue;
		}
		
		// mice can start coming in when no cat is eating
		if (catsCount > 0) {
			V(mutex);
			continue;
		}

		// increase the number of mice
		miceCount++;
		if(miceCount == 1)
			P(cats_or_mice);

		// eat either dish1 or dish2
		if (dish1Avail) {

			bowl = 1;
			dish1Avail = 0;
		}		
		else if (dish2Avail) {

			bowl = 2;
			dish2Avail = 0;
		}
		V(mutex);
			
		//start printing eating messages
		sem_eat("mouse", mousenumber, bowl, iteration);
		iteration++;

		// end a round of eating
		P(mutex);
		// decrease the number of mice
		miceCount--;
		if (miceCount == 0)
			V(cats_or_mice);

		//free bowls
		if (bowl == 1) {

			dish1Avail = 1;
		}
		else if (bowl == 2) {

			dish2Avail = 1;
		}
		V(mutex);	
	}	

}


/*
 * catmousesem()
 *
 * Arguments:
 *      int nargs: unused.
 *      char ** args: unused.
 *
 * Returns:
 *      0 on success.
 *
 * Notes:
 *      Driver code to start up catsem() and mousesem() threads.  Change this 
 *      code as necessary for your solution.
 */

int
catmousesem(int nargs,
            char ** args)
{
        int index, error;
   

        /*
         * Avoid unused variable warnings.
         */

        (void) nargs;
        (void) args;


	

	cats_or_mice = sem_create("cats_or_mice",1);
	mutex = sem_create("mutex",1);


        /*
         * Start NCATS catsem() threads.
         */

        for (index = 0; index < NCATS; index++) {
           
                error = thread_fork("catsem Thread", 
                                    NULL, 
                                    index, 
                                    catsem, 
                                    NULL
                                    );
                
                /*
                 * panic() on error.
                 */

                if (error) {
                 
                        panic("catsem: thread_fork failed: %s\n", 
                              strerror(error)
                              );
                }
        }
        
        /*
         * Start NMICE mousesem() threads.
         */

        for (index = 0; index < NMICE; index++) {
   
                error = thread_fork("mousesem Thread", 
                                    NULL, 
                                    index, 
                                    mousesem, 
                                    NULL
                                    );
                
                /*
                 * panic() on error.
                 */

                if (error) {
         
                        panic("mousesem: thread_fork failed: %s\n", 
                              strerror(error)
                              );
                }
        }

	//sem_destroy(cats_or_mice);
	//sem_destroy(mutex);

        return 0;
}


/*
 * End of catsem.c
 */
