#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <machine/pcb.h>
#include <machine/spl.h>
#include <machine/trapframe.h>
#include <kern/callno.h>
#include <syscall.h>
#include <kern/unistd.h>
#include <thread.h>
#include <curthread.h>
#include <addrspace.h>
#include <vm.h>
#include <lib.h>



/*
 * fork
 * Kernel level code: copy the address space and the trap frame 
 *
 */
int sys_fork(struct trapframe *tf, int *retval)
{
	
    struct thread* child;
    struct addrspace* child_as; 

    // create the new address space and frame for the child process
    int return_value = as_copy(curthread -> t_vmspace, &child_as);
    if(return_value){
        
        *retval = ENOMEM;
        return -1;
    }

    // copy the trap frame from the parent process to the child process
    struct trapframe *child_frame = kmalloc(sizeof(struct trapframe));
    if(child_frame == NULL){

	return ENOMEM;
    }

    memcpy(child_frame, tf, sizeof(struct trapframe));
    //*child_frame = *tf; 

    assert(curthread -> t_vmspace != NULL);


    return_value = thread_fork(curthread->t_name, (void*)child_frame, 
		    (unsigned long)child_as, md_forkentry, &child);

    if(return_value){
        kfree(child_frame);
	as_destroy(child_as);
        *retval = ENOMEM;
        return -1;
    }

    *retval = child->t_pid; 
    return 0;
}

/*
 * User level code for fork
 */
int md_forkentry(struct trapframe *tf, unsigned long vmspace)
{

    // make a local trapframe
    struct trapframe child_frame;
    // use the same address space as parent
    struct addrspace *child_addrspace = (struct addrspace*)vmspace;


    memcpy(&child_frame, tf, sizeof(struct trapframe));

    assert(curthread->t_vmspace == NULL);
    curthread->t_vmspace = child_addrspace;
    as_activate(curthread->t_vmspace);

    // change the register values
    child_frame.tf_v0 = 0;
    child_frame.tf_a3 = 0;
    child_frame.tf_epc += 4;

    
    mips_usermode(&child_frame);
    return 0;

}

/*
 * Getpid returns the process id of the current process.
 */
int sys_getpid(struct trapframe *tf, int *retval)
{

	*retval = curthread->t_pid;
	return 0;

}

/*
 * User level code for fork
 */
int sys_waitpid(struct trapframe *tf, int *retval)
{
	    
	return 0;

}

/*
 * User level code for fork
 */
int sys__exit(struct trapframe *tf, int *retval)
{

	int exit_code = tf->tf_a0;
	//add stuff here... wait pid???



    
	return 0;

}


